<?xml version="1.0"?>
<robot xmlns:xacro="http://ros.org/wiki/xacro" name="mower">
  <!-- Parameters -->
  <xacro:property name="wheel_radius" value="0.15"/>
  <xacro:property name="wheel_width" value="0.06"/>
  <xacro:property name="wheel_separation" value="0.56"/>
  <xacro:property name="rear_wheel_offset" value="0.05"/>
  <xacro:property name="base_length" value="0.6"/>
  <xacro:property name="base_width" value="0.5"/>
  <xacro:property name="base_height" value="0.15"/>
  <xacro:property name="ground_clearance" value="0.09"/>
  <xacro:property name="front_wheel_radius" value="0.045"/>
  <xacro:property name="front_wheel_offset" value="0.05"/>
  <!-- mower blades (piatti di taglio) -->
  <xacro:property name="blade_radius" value="0.11"/>
  <xacro:property name="blade_thickness" value="0.003"/>
  <xacro:property name="blade_offset_y" value="0.11"/>
  <xacro:property name="blade_offset_x" value="0.0"/>
  <!-- sim toggle -->
  <xacro:property name="use_sim" value="false"/>
  <!-- ros2_control -->
  <xacro:property name="port" value="/dev/ttyAMA0"/>
  <xacro:property name="baud" value="115200"/>
  <ros2_control name="MowerHardware" type="system">
    <hardware>
      <plugin>pico_control_hardware/PicoSystemHardware</plugin>
      <param name="port">${port}</param>
      <param name="baud">${baud}</param>
      <param name="timeout">1000</param>
    </hardware>
    <joint name="left_wheel_joint">
      <command_interface name="velocity"/>
      <state_interface name="position"/>
      <state_interface name="velocity"/>
    </joint>
    <joint name="right_wheel_joint">
      <command_interface name="velocity"/>
      <state_interface name="position"/>
      <state_interface name="velocity"/>
    </joint>
  </ros2_control>

  <!-- Inertial helper -->
  <xacro:macro name="inertial_box" params="mass x y z">
    <inertial>
      <mass value="${mass}"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="${mass/12.0 * (y*y + z*z)}" iyy="${mass/12.0 * (x*x + z*z)}" izz="${mass/12.0 * (x*x + y*y)}" ixy="0" ixz="0" iyz="0"/>
    </inertial>
  </xacro:macro>

  <!-- Base link (empty) and chassis separated to avoid KDL root inertia warning -->
  <link name="base_link"/>

  <joint name="chassis_joint" type="fixed">
    <parent link="base_link"/>
    <child link="chassis"/>
    <origin xyz="0 0 ${ground_clearance + base_height/2.0}" rpy="0 0 0"/>
  </joint>

  <link name="chassis">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
      <material name="green"><color rgba="0.1 0.6 0.1 1.0"/></material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
    </collision>
    <xacro:inertial_box mass="10.0" x="${base_length}" y="${base_width}" z="${base_height}"/>
{{ ... }}
  </link>

  <!-- IMU -->
  <link name="imu_link">
    <visual>
      <origin xyz="0 0 ${ground_clearance + base_height + 0.02}" rpy="0 0 0"/>
      <geometry>
        <sphere radius="0.02"/>
      </geometry>
      <material name="blue"><color rgba="0.2 0.2 0.8 1.0"/></material>
    </visual>
    <collision>
      <origin xyz="0 0 ${ground_clearance + base_height + 0.02}" rpy="0 0 0"/>
      <geometry>
        <sphere radius="0.02"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.1"/>
      <origin xyz="0 0 ${ground_clearance + base_height + 0.02}" rpy="0 0 0"/>
      <inertia ixx="1e-4" iyy="1e-4" izz="1e-4" ixy="0" ixz="0" iyz="0"/>
    </inertial>
  </link>
  <joint name="imu_joint" type="fixed">
    <parent link="base_link"/>
    <child link="imu_link"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint>

  <!-- Wheels -->
  <link name="left_wheel">
    <visual>
      <origin xyz="0 0 0" rpy="-${pi/2} 0 0"/>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
      <material name="black">
        <color rgba="0.05 0.05 0.05 1.0"/>
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="-${pi/2} 0 0"/>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="1.0"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="0.01" iyy="0.01" izz="0.01" ixy="0" ixz="0" iyz="0"/>
    </inertial>
  </link>

  <link name="right_wheel">
    <visual>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="1.0"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="0.01" iyy="0.01" izz="0.01" ixy="0" ixz="0" iyz="0"/>
    </inertial>
  </link>

  <joint name="left_wheel_joint" type="continuous">
    <parent link="base_link"/>
    <child link="left_wheel"/>
    <origin xyz="-${base_length/2 - rear_wheel_offset} ${wheel_separation/2.0} ${wheel_radius}" rpy="0 0 0"/>
    <axis xyz="0 1 0"/>
  </joint>

  <joint name="right_wheel_joint" type="continuous">
    <parent link="base_link"/>
    <child link="right_wheel"/>
    <origin xyz="-${base_length/2 - rear_wheel_offset} ${-wheel_separation/2.0} ${wheel_radius}" rpy="0 0 0"/>
    <axis xyz="0 1 0"/>
  </joint>

  <!-- Front caster wheel -->
  <joint name="front_wheel_joint" type="fixed">
    <parent link="base_link"/>
    <child link="front_wheel"/>
    <origin xyz="${base_length/2 - front_wheel_offset} 0 ${front_wheel_radius}" rpy="0 0 0"/>
  </joint>

  <link name="front_wheel">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <sphere radius="${front_wheel_radius}"/>
      </geometry>
      <material name="gray"><color rgba="0.3 0.3 0.3 1.0"/></material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <sphere radius="${front_wheel_radius}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.5"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="${0.4 * 0.5 * front_wheel_radius * front_wheel_radius}"
               iyy="${0.4 * 0.5 * front_wheel_radius * front_wheel_radius}"
               izz="${0.4 * 0.5 * front_wheel_radius * front_wheel_radius}"
               ixy="0" ixz="0" iyz="0"/>
    </inertial>
  </link>

  <!-- Gazebo friction for caster (sim only) -->
  <xacro:if value="${use_sim}">
  <gazebo reference="front_wheel">
    <mu1>0.1</mu1>
    <mu2>0.1</mu2>
  </gazebo>
  </xacro:if>

  <!-- Gazebo plugins (only in sim) -->
  <xacro:if value="${use_sim}">
    <gazebo>
      <plugin name="diff_drive" filename="libgazebo_ros_diff_drive.so">
        <ros>
          <namespace>/</namespace>
          <remapping>cmd_vel:=/cmd_vel</remapping>
          <remapping>odom:=/odometry/raw</remapping>
        </ros>
        <update_rate>50</update_rate>
        <left_joint>left_wheel_joint</left_joint>
        <right_joint>right_wheel_joint</right_joint>
        <wheel_separation>${wheel_separation}</wheel_separation>
        <wheel_diameter>${2*wheel_radius}</wheel_diameter>
        <max_wheel_torque>5</max_wheel_torque>
        <max_wheel_acceleration>3</max_wheel_acceleration>
        <publish_tf>true</publish_tf>
        <publish_odom>true</publish_odom>
        <odometry_frame>odom</odometry_frame>
        <robot_base_frame>base_link</robot_base_frame>
      </plugin>
    </gazebo>
  </xacro:if>

  <!-- IMU sensor plugin (sim only) -->
  <xacro:if value="${use_sim}">
  <gazebo reference="imu_link">
    <gravity>true</gravity>
    <sensor name="mower_imu" type="imu">
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <imu>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>0.001</stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian"><mean>0.0</mean><stddev>0.001</stddev></noise>
          </y>
          <z>
            <noise type="gaussian"><mean>0.0</mean><stddev>0.001</stddev></noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian"><mean>0.0</mean><stddev>0.01</stddev></noise>
          </x>
          <y>
            <noise type="gaussian"><mean>0.0</mean><stddev>0.01</stddev></noise>
          </y>
          <z>
            <noise type="gaussian"><mean>0.0</mean><stddev>0.01</stddev></noise>
          </z>
        </linear_acceleration>
      </imu>
      <plugin name="imu_plugin" filename="libgazebo_ros_imu_sensor.so">
        <ros>
          <namespace>/</namespace>
          <remapping>~/out:=/sensors/imu</remapping>
        </ros>
        <frame_name>imu_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>
  </xacro:if>

  <!-- Sonar frontali: LEFT -->
  <joint name="sonar_left_joint" type="fixed">
    <parent link="chassis"/>
    <child link="sonar_left_frame"/>
    <origin xyz="${base_length/2 + 0.01} 0.10 0.0" rpy="0 0 ${pi/6}"/>
  </joint>

  <link name="sonar_left_frame">
    <visual>
      <origin xyz="0 0 0" rpy="0 ${pi/2} 0"/>
      <geometry>
        <cylinder length="0.02" radius="0.015"/>
      </geometry>
      <material name="sonar_material">
        <color rgba="0.2 0.2 0.2 1.0"/>
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 ${pi/2} 0"/>
      <geometry>
        <cylinder length="0.02" radius="0.015"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.05"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-5" iyy="1e-5" izz="1e-5" ixy="0" ixz="0" iyz="0"/>
    </inertial>
  </link>

  <xacro:if value="${use_sim}">
  <gazebo reference="sonar_left_frame">
    <sensor name="sonar_left" type="gpu_lidar">
      <always_on>true</always_on>
      <visualize>true</visualize>
      <update_rate>10</update_rate>
      <topic>/sonar/left/scan</topic>
      <gz_frame_id>sonar_left_frame</gz_frame_id>
      <lidar>
        <scan>
          <horizontal>
            <samples>1</samples>
            <resolution>1</resolution>
            <min_angle>0</min_angle>
            <max_angle>0</max_angle>
          </horizontal>
          <vertical>
            <samples>1</samples>
            <resolution>1</resolution>
            <min_angle>0</min_angle>
            <max_angle>0</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.02</min>
          <max>3.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </lidar>
    </sensor>
  </gazebo>
  </xacro:if>

  <!-- Sonar frontali: CENTER -->
  <joint name="sonar_center_joint" type="fixed">
    <parent link="chassis"/>
    <child link="sonar_center_frame"/>
    <origin xyz="${base_length/2 + 0.01} 0.0 0.0" rpy="0 0 0"/>
  </joint>

  <link name="sonar_center_frame">
    <visual>
      <origin xyz="0 0 0" rpy="0 ${pi/2} 0"/>
      <geometry>
        <cylinder length="0.02" radius="0.015"/>
      </geometry>
      <material name="sonar_material"/>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 ${pi/2} 0"/>
      <geometry>
        <cylinder length="0.02" radius="0.015"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.05"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-5" iyy="1e-5" izz="1e-5" ixy="0" ixz="0" iyz="0"/>
    </inertial>
  </link>

  <xacro:if value="${use_sim}">
  <gazebo reference="sonar_center_frame">
    <sensor name="sonar_center" type="gpu_lidar">
      <always_on>true</always_on>
      <visualize>true</visualize>
      <update_rate>10</update_rate>
      <topic>/sonar/center/scan</topic>
      <gz_frame_id>sonar_center_frame</gz_frame_id>
      <lidar>
        <scan>
          <horizontal>
            <samples>1</samples>
            <resolution>1</resolution>
            <min_angle>0</min_angle>
            <max_angle>0</max_angle>
          </horizontal>
          <vertical>
            <samples>1</samples>
            <resolution>1</resolution>
            <min_angle>0</min_angle>
            <max_angle>0</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.02</min>
          <max>3.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </lidar>
    </sensor>
  </gazebo>
  </xacro:if>

  <!-- Sonar frontali: RIGHT -->
  <joint name="sonar_right_joint" type="fixed">
    <parent link="chassis"/>
    <child link="sonar_right_frame"/>
    <origin xyz="${base_length/2 + 0.01} -0.10 0.0" rpy="0 0 -${pi/6}"/>
  </joint>

  <link name="sonar_right_frame">
    <visual>
      <origin xyz="0 0 0" rpy="0 ${pi/2} 0"/>
      <geometry>
        <cylinder length="0.02" radius="0.015"/>
      </geometry>
      <material name="sonar_material"/>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 ${pi/2} 0"/>
      <geometry>
        <cylinder length="0.02" radius="0.015"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.05"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-5" iyy="1e-5" izz="1e-5" ixy="0" ixz="0" iyz="0"/>
    </inertial>
  </link>

  <xacro:if value="${use_sim}">
  <gazebo reference="sonar_right_frame">
    <sensor name="sonar_right" type="gpu_lidar">
      <always_on>true</always_on>
      <visualize>true</visualize>
      <update_rate>10</update_rate>
      <topic>/sonar/right/scan</topic>
      <gz_frame_id>sonar_right_frame</gz_frame_id>
      <lidar>
        <scan>
          <horizontal>
            <samples>1</samples>
            <resolution>1</resolution>
            <min_angle>0</min_angle>
            <max_angle>0</max_angle>
          </horizontal>
          <vertical>
            <samples>1</samples>
            <resolution>1</resolution>
            <min_angle>0</min_angle>
            <max_angle>0</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.02</min>
          <max>3.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </lidar>
    </sensor>
  </gazebo>
  </xacro:if>

  <!-- GPS sensor on top of chassis -->
  <joint name="gps_joint" type="fixed">
    <parent link="chassis"/>
    <child link="gps_frame"/>
    <origin xyz="0 0 ${base_height/2.0 + 0.02}" rpy="0 0 0"/>
  </joint>

  <link name="gps_frame">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder length="0.02" radius="0.04"/>
      </geometry>
      <material name="gps_material"><color rgba="0.0 0.0 1.0 1.0"/></material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder length="0.02" radius="0.04"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.2"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <!-- Solid cylinder inertia: Ixx=Iyy=1/12*m*(3r^2 + L^2), Izz=1/2*m*r^2 -->
      <inertia ixx="${(1.0/12.0)*0.2*(3*0.04*0.04 + 0.02*0.02)}"
               iyy="${(1.0/12.0)*0.2*(3*0.04*0.04 + 0.02*0.02)}"
               izz="${0.5*0.2*0.04*0.04}"
               ixy="0" ixz="0" iyz="0"/>
    </inertial>
  </link>

  <xacro:if value="${use_sim}">
  <gazebo reference="gps_frame">
    <sensor name="gps" type="navsat">
      <always_on>true</always_on>
      <update_rate>10</update_rate>
      <topic>/gps/fix</topic>
      <gz_frame_id>gps_frame</gz_frame_id>
      <navsat>
        <position_sensing>
          <horizontal>
            <noise type="gaussian"><mean>0.0</mean><stddev>0.5</stddev></noise>
          </horizontal>
          <vertical>
            <noise type="gaussian"><mean>0.0</mean><stddev>1.0</stddev></noise>
          </vertical>
        </position_sensing>
        <velocity_sensing>
          <horizontal>
            <noise type="gaussian"><mean>0.0</mean><stddev>0.1</stddev></noise>
          </horizontal>
          <vertical>
            <noise type="gaussian"><mean>0.0</mean><stddev>0.2</stddev></noise>
          </vertical>
        </velocity_sensing>
      </navsat>
    </sensor>
  </gazebo>
  </xacro:if>

  <!-- Camera sensor on front of chassis -->
  <joint name="camera_joint" type="fixed">
    <parent link="chassis"/>
    <child link="camera_frame"/>
    <origin xyz="${base_length/2 - 0.05} 0 ${base_height/2.0 + 0.02}" rpy="0 0 0"/>
  </joint>

  <link name="camera_frame">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.04 0.08 0.06"/>
      </geometry>
      <material name="camera_material"><color rgba="0.1 0.1 0.1 1.0"/></material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.04 0.08 0.06"/>
      </geometry>
    </collision>
    <xacro:inertial_box mass="0.1" x="0.04" y="0.08" z="0.06"/>
  </link>

  <xacro:if value="${use_sim}">
  <gazebo reference="camera_frame">
    <sensor name="camera" type="camera">
      <pose>0 0 0 0 0 0</pose>
      <topic>/camera/image</topic>
      <always_on>true</always_on>
      <visualize>true</visualize>
      <update_rate>10</update_rate>
      <camera>
        <horizontal_fov>1.57</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.1</near>
          <far>100</far>
        </clip>
        <info_topic>/camera/camera_info</info_topic>
      </camera>
      <frame_id>camera_frame</frame_id>
    </sensor>
  </gazebo>
  </xacro:if>

  <!-- Cutting Blades (two discs under chassis) [moved to end] -->
  <joint name="blade_left_joint" type="fixed">
    <parent link="chassis"/>
    <!-- Place at bottom of chassis: z = -(base_height/2 + blade_thickness/2) -->
    <child link="blade_left"/>
    <origin xyz="${blade_offset_x} ${blade_offset_y} -${base_height/2.0 + blade_thickness/2.0}" rpy="0 0 0"/>
  </joint>

  <link name="blade_left">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="${blade_radius}" length="${blade_thickness}"/>
      </geometry>
      <material name="blade_mat"><color rgba="0.6 0.6 0.6 1.0"/></material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="${blade_radius}" length="${blade_thickness}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.2"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-4" iyy="1e-4" izz="1e-4" ixy="0" ixz="0" iyz="0"/>
    </inertial>
  </link>

  <joint name="blade_right_joint" type="fixed">
    <parent link="chassis"/>
    <child link="blade_right"/>
    <origin xyz="${blade_offset_x} -${blade_offset_y} -${base_height/2.0 + blade_thickness/2.0}" rpy="0 0 0"/>
  </joint>

  <link name="blade_right">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="${blade_radius}" length="${blade_thickness}"/>
      </geometry>
      <material name="blade_mat"/>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="${blade_radius}" length="${blade_thickness}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.2"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-4" iyy="1e-4" izz="1e-4" ixy="0" ixz="0" iyz="0"/>
    </inertial>
  </link>

</robot>
