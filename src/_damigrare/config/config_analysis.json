{
  "used_parameters": {
    "fusion_config": {
      "imu": {
        "update_rate_hz": "Used in fusion_sensor.cpp",
        "accel_range_g": "Used in fusion_sensor.cpp",
        "gyro_range_dps": "Used in fusion_sensor.cpp",
        "mag_range_ut": "Used in fusion_sensor.cpp",
        "calibration": {
          "accel_offset": "Used in fusion_sensor.cpp",
          "gyro_offset": "Used in fusion_sensor.cpp",
          "mag_offset": "Used in fusion_sensor.cpp",
          "mag_scale": "Used in fusion_sensor.cpp"
        }
      },
      "gps": {
        "update_rate_hz": "Used in fusion_sensor.cpp",
        "timeout_ms": "Used in fusion_sensor.cpp",
        "hdop_threshold": "Used in fusion_sensor.cpp",
        "min_satellites": "Used in fusion_sensor.cpp"
      },
      "odometry": {
        "wheel_base": "Used in fusion_sensor.cpp",
        "wheel_radius": "Used in fusion_sensor.cpp",
        "ticks_per_revolution": "Used in fusion_sensor.cpp"
      },
      "fusion_parameters": {
        "update_rate_hz": "Used in fusion_sensor.cpp",
        "publish_rate_hz": "Used in fusion_sensor.cpp",
        "process_noise": {
          "position": "Used in fusion_sensor.cpp",
          "velocity": "Used in fusion_sensor.cpp",
          "orientation": "Used in fusion_sensor.cpp"
        },
        "measurement_noise": {
          "gps_position": "Used in fusion_sensor.cpp",
          "imu_accel": "Used in fusion_sensor.cpp",
          "imu_gyro": "Used in fusion_sensor.cpp",
          "odometry": "Used in fusion_sensor.cpp"
        },
        "filter_alpha": {
          "velocity": "Used in fusion_sensor.cpp",
          "position": "Used in fusion_sensor.cpp",
          "orientation": "Used in fusion_sensor.cpp"
        }
      },
      "tuning": {
        "pid": {
          "linear_kp": "Used in fusion_sensor.cpp",
          "linear_ki": "Used in fusion_sensor.cpp",
          "linear_kd": "Used in fusion_sensor.cpp",
          "angular_kp": "Used in fusion_sensor.cpp",
          "angular_ki": "Used in fusion_sensor.cpp",
          "angular_kd": "Used in fusion_sensor.cpp"
        },
        "kalman": {
          "process_noise_pos": "Used in fusion_sensor.cpp",
          "process_noise_vel": "Used in fusion_sensor.cpp",
          "measurement_noise_gps": "Used in fusion_sensor.cpp",
          "measurement_noise_imu": "Used in fusion_sensor.cpp",
          "initial_covariance": "Used in fusion_sensor.cpp"
        }
      },
      "mqtt_settings": {
        "qos": "Used in fusion_sensor.cpp",
        "retain": "Used in fusion_sensor.cpp",
        "keepalive": "Used in fusion_sensor.cpp",
        "broker_host": "Used in fusion_sensor.cpp",
        "broker_port": "Used in fusion_sensor.cpp",
        "username": "Used in fusion_sensor.cpp",
        "password": "Used in fusion_sensor.cpp"
      },
      "logging": {
        "enabled": "Used in fusion_sensor.cpp",
        "level": "Used in fusion_sensor.cpp",
        "file": "Used in fusion_sensor.cpp",
        "save_raw_data": "Used in fusion_sensor.cpp",
        "data_dir": "Used in fusion_sensor.cpp"
      }
    },
    "gps_config": {
      "uart_device": "Used in gps_bridge.c",
      "baudrate": "Used in gps_bridge.c",
      "timeout_ms": "Used in gps_bridge.c",
      "protocol": "Used in gps_bridge.c",
      "max_satellites": "Used in gps_bridge.c"
    },
    "vision": {
      "camera": {
        "device": "Used in test_camera.py",
        "width": "Used in test_camera.py",
        "height": "Used in test_camera.py",
        "fps": "Used in test_camera.py"
      },
      "obstacle_detection": {
        "min_contour_area": "Used in sfm_obstacle_detector.cpp",
        "threshold_value": "Used in sfm_obstacle_detector.cpp",
        "blur_size": "Used in sfm_obstacle_detector.cpp",
        "erode_iterations": "Used in sfm_obstacle_detector.cpp",
        "dilate_iterations": "Used in sfm_obstacle_detector.cpp"
      },
      "perimeter_detection": {
        "warning_distance_m": "Used in perimeter_detector.cpp",
        "alert_distance_m": "Used in perimeter_detector.cpp",
        "max_distance_m": "Used in perimeter_detector.cpp"
      }
    },
    "hardware": {
      "motors": {
        "left": {
          "pwm_pin": "Used in motor control code",
          "direction_pin1": "Used in motor control code",
          "direction_pin2": "Used in motor control code"
        },
        "right": {
          "pwm_pin": "Used in motor control code",
          "direction_pin1": "Used in motor control code",
          "direction_pin2": "Used in motor control code"
        },
        "gear_ratio": "Used in motor control code",
        "encoder_ppr": "Used in motor control code",
        "max_rpm": "Used in motor control code"
      },
      "odometry": {
        "wheel_base": "Used in fusion_sensor.cpp",
        "wheel_radius": "Used in fusion_sensor.cpp",
        "ticks_per_revolution": "Used in fusion_sensor.cpp"
      }
    },
    "mqtt": {
      "broker": "Used in multiple modules",
      "port": "Used in multiple modules",
      "username": "Used in multiple modules",
      "password": "Used in multiple modules",
      "topics": {
        "camera": {
          "base": "Used in vision modules",
          "subtopics": {
            "frame": "Used in vision modules",
            "status": "Used in vision modules",
            "commands": "Used in vision modules"
          },
          "qos": "Used in vision modules",
          "retain": "Used in vision modules"
        },
        "obstacle": {
          "base": "Used in obstacle detection",
          "subtopics": {
            "detection": "Used in obstacle detection",
            "status": "Used in obstacle detection"
          },
          "qos": "Used in obstacle detection",
          "retain": "Used in obstacle detection"
        },
        "perimeter": {
          "base": "Used in perimeter detection",
          "subtopics": {
            "detection": "Used in perimeter detection",
            "status": "Used in perimeter detection"
          },
          "qos": "Used in perimeter detection",
          "retain": "Used in perimeter detection"
        },
        "grass": {
          "base": "Used in grass detection",
          "subtopics": {
            "detection": "Used in grass detection",
            "status": "Used in grass detection"
          },
          "qos": "Used in grass detection",
          "retain": "Used in grass detection"
        },
        "gps": {
          "base": "Used in GPS module",
          "subtopics": {
            "data": "Used in GPS module",
            "status": "Used in GPS module",
            "heartbeat": "Used in GPS module",
            "commands": "Used in GPS module"
          },
          "qos": "Used in GPS module",
          "retain": "Used in GPS module",
          "keepalive": "Used in GPS module"
        },
        "pico": {
          "base": "Used in Pico module",
          "subtopics": {
            "sensors": "Used in Pico module",
            "odometry": "Used in Pico module",
            "status": "Used in Pico module",
            "heartbeat": "Used in Pico module",
            "commands": {
              "motors": "Used in Pico module",
              "system": "Used in Pico module"
            }
          },
          "qos": "Used in Pico module",
          "retain": "Used in Pico module",
          "keepalive": "Used in Pico module",
          "client_id": "Used in Pico module"
        }
      }
    },
    "state_machine_config": {
      "robot_parameters": {
        "area": {
          "total_area_sqm": "Used in state machine",
          "dock_position": "Used in state machine"
        },
        "battery": {
          "battery_profile": "Used in state machine",
          "charging_threshold": "Used in state machine",
          "critical_threshold": "Used in state machine"
        }
      }
    }
  },
  "unused_parameters": {
    "metadata": "Not referenced in code",
    "battery_profiles": "Not referenced in code (should be used by battery management)",
    "tuning.speeds": "Not referenced in code (should be used by motion control)",
    "hardware.dimensions": "Not referenced in code (should be used for collision detection)",
    "hardware.sensors": "Not referenced in code (should be used by sensor modules)",
    "hardware.actuators": "Not referenced in code (should be used by actuator control)",
    "hardware.communication": "Partially used (only MQTT is used)",
    "hardware.storage": "Not referenced in code (should be used for data logging)",
    "hardware.power_management": "Not referenced in code (should be used for power management)",
    "state_machine_config.operating_modes": "Not referenced in code (should be used by state machine)",
    "state_machine_config.error_handling": "Not referenced in code (should be used by error handling)",
    "state_machine_config.safety_features": "Not referenced in code (should be used by safety system)",
    "state_machine_config.maintenance": "Not referenced in code (should be used by maintenance system)"
  }
}
