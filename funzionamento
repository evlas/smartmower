# Logica Software - Analisi Completa

## 1. Architettura Generale del Sistema

### Struttura a Loop Principale
```
Main Loop:
├── Lettura Sensori
├── Aggiornamento State Machine
├── Calcolo Navigazione
├── Controllo Motori (PID)
├── Gestione Sicurezza
└── Logging/Debug
```

## 2. Gestione State Machine del Robot

### Stati Principali
- **IDLE**: Robot in standby, pronto per comandi
- **MOWING**: Modalità taglio attiva
- **DOCKING**: Ritorno alla base di ricarica
- **CHARGING**: In carica alla base
- **ERROR**: Gestione errori e situazioni critiche
- **MANUAL**: Controllo manuale remoto

### Transizioni di Stato
```
IDLE → MOWING: Batteria OK + Timer attivo
MOWING → DOCKING: Batteria bassa OR fine sessione
MOWING → ERROR: Sensore di sicurezza attivato
ERROR → IDLE: Reset manuale OR auto-recovery
DOCKING → CHARGING: Base raggiunta
CHARGING → IDLE: Batteria carica
```

### Sottostati in Modalità MOWING
- **FORWARD**: Movimento in avanti durante taglio
- **ROTATE_LEFT/RIGHT**: Rotazione per evitare ostacoli
- **PERIMETER_TRACKING**: Seguimento filo perimetrale
- **SPIRAL**: Pattern di taglio a spirale
- **RANDOM**: Movimento casuale nell'area

## 3. Algoritmi di Navigazione e Pathfinding

### Navigazione Basata su Filo Perimetrale
- **Principio**: Il robot rileva il campo magnetico generato dal filo perimetrale
- **Sensori**: Bobine di rilevamento posizionate anteriormente
- **Logica**: Mantiene una distanza costante dal filo (tipicamente 20-30cm all'interno)

### Algoritmi di Movimento

#### Pattern di Taglio Casuale
```
Algoritmo Base:
1. Muovi avanti fino a rilevare ostacolo/filo
2. Ruota di un angolo casuale (90°-180°)
3. Riprendi movimento in avanti
4. Ripeti
```

#### Pattern Spirale
```
Algoritmo Spirale:
1. Parti dal centro dell'area
2. Muovi in cerchi concentrici crescenti
3. Incrementa gradualmente il raggio
4. Quando raggiungi il perimetro, ricomincia
```

#### Seguimento Perimetrale
```
Algoritmo Perimeter Following:
1. Rileva il filo perimetrale
2. Mantieni distanza costante (PID control)
3. Segui il filo per tutta la circonferenza
4. Utile per taglio bordi e mapping area
```

### Rilevamento e Evasione Ostacoli
- **Sensori Bumper**: Rilevamento contatto fisico
- **Sensori Ultrasuoni**: Rilevamento ostacoli a distanza
- **Algoritmo**: 
  1. Stop immediato su rilevamento
  2. Retromarcia per 1-2 secondi
  3. Rotazione casuale 90°-180°
  4. Ripresa movimento

## 4. Controllo Motori e PID

### Architettura Controllo Motori
- **Due motori trazione**: Controllo differenziale per sterzo
- **Un motore lame**: Controllo velocità costante
- **Encoder**: Feedback velocità e posizione (odometria)

### Controllo PID per Trazione
```
PID Parameters:
- Kp (Proporzionale): Risposta immediata all'errore
- Ki (Integrale): Correzione errori accumulati
- Kd (Derivativo): Predizione trend errore

Variabili Controllate:
- Velocità lineare (m/s)
- Velocità angolare (rad/s)
- Posizione (x, y, θ)
```

### Implementazione PID
```
Output = Kp * error + Ki * integral + Kd * derivative

Where:
- error = setpoint - measured_value
- integral += error * dt
- derivative = (error - previous_error) / dt
```

### Controllo Differenziale
```
Linear_velocity = (left_wheel + right_wheel) / 2
Angular_velocity = (right_wheel - left_wheel) / wheelbase

Per sterzo:
left_motor_speed = linear_vel - (angular_vel * wheelbase/2)
right_motor_speed = linear_vel + (angular_vel * wheelbase/2)
```

## 5. Gestione Sensori e Sicurezza

### Sensori di Sicurezza Critici
- **Tilt Sensor**: Rilevamento ribaltamento
- **Lift Sensor**: Rilevamento sollevamento
- **Rain Sensor**: Stop per pioggia
- **Current Sensor**: Sovraccarico motori
- **Bumper Sensors**: Collisioni

### Gerarchia di Sicurezza
```
PRIORITÀ MASSIMA:
1. Tilt/Lift → STOP IMMEDIATO + Disattiva lame
2. Corrente eccessiva → STOP motori

PRIORITÀ ALTA:
3. Pioggia → Rientro base
4. Batteria bassa → Rientro base

PRIORITÀ NORMALE:
5. Bumper → Evasione ostacolo
6. Perimetro → Correzione traiettoria
```

### Logica di Gestione Errori
```
Error Handling:
1. Rilevamento condizione critica
2. Stop immediato sistema propulsione
3. Disattivazione lame
4. Tentativo auto-recovery (se possibile)
5. Se fallisce: Stato ERROR + Allarme
```

## 6. Logica di Taglio e Pattern

### Gestione Altezza Taglio
- **Controllo motore lame**: Velocità costante ottimale
- **Regolazione altezza**: Meccanica (non software)
- **Monitoraggio carico**: Rilevamento erba alta/fitta

### Pattern di Efficienza
```
Strategia Multi-Pattern:
1. Inizio sessione: Perimeter following (bordi)
2. Fase principale: Random walk (95% area)
3. Zone difficili: Spiral pattern
4. Fine sessione: Quick random per ritocchi
```

### Gestione Tempo di Lavoro
- **Scheduling**: Timer programmabili per giorni/ore
- **Durata sessioni**: Basata su dimensione area e batteria
- **Pause intelligenti**: Evita ore calde o pioggia prevista

### Algoritmo di Copertura Completa
```
Coverage Algorithm:
1. Divide area in celle virtuali (grid)
2. Traccia celle visitate tramite odometria
3. Bias movimento verso celle meno visitate
4. Garantisce copertura uniforme nel tempo
```

## 7. Odometria e Localizzazione

### Calcolo Posizione
```
Dead Reckoning:
x(t+1) = x(t) + distance * cos(θ)
y(t+1) = y(t) + distance * sin(θ)
θ(t+1) = θ(t) + angular_change

Where:
distance = (left_encoder + right_encoder) / 2 * wheel_circumference
angular_change = (right_encoder - left_encoder) / wheelbase * wheel_circumference
```

### Correzione Deriva
- **Riferimenti fissi**: Filo perimetrale per correzione periodica
- **Reset position**: Quando raggiunge base di ricarica
- **Filtro complementare**: Combina odometria + sensori esterni

## 8. Comunicazione e Monitoraggio

### Interfacce Disponibili
- **Bluetooth**: Configurazione e controllo remoto
- **WiFi**: Monitoraggio via app/web
- **LCD/LE




Possibili miglioramenti:

SLAM (Simultaneous Localization and Mapping) invece di semplice odometria
Computer vision per riconoscimento ostacoli
Machine learning per ottimizzazione pattern
GPS per localizzazione assoluta

implementare SLAM avanzato. Analizziamo il potenziale di ogni sensore che hai:
Il Tuo Arsenal di Sensori
2 Sonar Anteriori

Uso SLAM: Rilevamento ostacoli e mapping locale
Configurazione ottimale: Angolati ±30° per copertura più ampia
Vantaggi: Robusti, lavorano in tutte le condizioni meteo
Range tipico: 2-400cm, perfetto per navigazione

Telecamera

Uso SLAM: Visual landmarks, texture matching, loop closure
Potenziale: Riconoscimento oggetti, linee, pattern erba
Con RPi 5: Computer vision real-time possibile
Sfide: Condizioni luce variabili, pioggia

GPS NEO-8M F10N

Precisione: ~2-3m in condizioni normali, <1m con correzioni
Uso SLAM: Anchor globale per correggere deriva
Vantaggio enorme: Reset automatico posizione assoluta
Problema da gestire: Perdita segnale sotto alberi/coperture

MPU6050 (IMU)

Accelerometro + Giroscopio: Orientamento e movimento
Uso SLAM: Stima movimento tra letture sensori, rilevamento inclinazioni
Essenziale per: Fusion sensor, dead reckoning migliorato

Magnetometro

Uso: Orientamento assoluto (nord magnetico)
Complementa: MPU6050 per heading stabile
Calibrazione: Necessaria per interferenze metalliche

Architettura SLAM Ottimale per il Tuo Setup
Hai le basi per un sistema Multi-Sensor Fusion SLAM molto potente:
Livello 1: Odometria Migliorata
Encoder ruote + MPU6050 + Magnetometro = 
Dead Reckoning molto più accurato del sistema base
Livello 2: Local SLAM
Sonar + Odometria migliorata = 
Mappa locale ostacoli + navigazione precisa
Livello 3: Visual Enhancement
Camera + Local SLAM = 
Riconoscimento landmarks + loop closure
Livello 4: Global Correction
GPS + Visual SLAM = 
Correzione deriva + posizione assoluta
Strategia di Implementazione Progressiva
Ti suggerisco di implementare per fasi:
Fase 1: Sensor Fusion Base

Integra MPU6050 + magnetometro + encoder
Ottieni odometria molto più stabile di PiArdumower originale
Già questo ti darebbe navigazione superiore

Fase 2: Obstacle Mapping

Aggiungi i 2 sonar per mapping ostacoli locali
Implementa semplice occupancy grid
Il robot inizia a "ricordare" dove sono gli ostacoli

Fase 3: GPS Integration

Usa GPS per reset periodico posizione globale
Gestisci transizioni GPS available/unavailable
Coordinate assolute per ritorno base preciso

Fase 4: Visual SLAM

Integra camera per landmarks visivi
Loop closure quando riconosce posti già visititi
Mapping più dettagliato dell'ambiente

Vantaggi Specifici del Tuo Setup
Ridondanza Sensori:

Se GPS si perde → continua con Visual+Sonar SLAM
Se camera non vede → continua con Sonar+GPS
Se sonar si sporca → usa Visual+GPS

Precisione Scalabile:

Alta precisione: Tutti i sensori funzionanti
Media precisione: Alcuni sensori indisponibili
Backup: Solo odometria+IMU (comunque meglio del base)

Capacità Uniche:

Zone mapping: GPS per coordinate assolute delle aree
Obstacle memory: Ricorda alberi, aiuole, mobili da giardino
Weather adaptation: Sonar lavorano anche con pioggia/nebbia
Return-to-base precision: GPS guida fino a prossimità, poi visual/sonar per docking preciso