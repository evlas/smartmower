{
  "metadata": {
    "version": "1.0.0",
    "description": "MQTT definitions extracted from source header files",
    "extraction_date": "2025-07-27 12:09:51",
    "source": "Hand-written header files in src/"
  },
  "executables": {
    "pico": {
      "name": "pico",
      "header_file": "/home/vito/smartmower/src/pico/pico_mqtt.h",
      "published_topics": [
        "pico_sensors",
        "pico_status",
        "pico_bridge_status",
        "pico_cmd_motors",
        "pico_cmd_system"
      ],
      "subscribed_topics": [],
      "message_types": [
        "pico_sensor_data",
        "pico_status_report",
        "pico_bridge_heartbeat"
      ],
      "configuration": {
        "base_topic": "smartmower/pico",
        "client_id": "pico_bridge",
        "heartbeat_interval": "5"
      },
      "json_structures": {
        "data": {
          "topic": "/sensors",
          "json_example": [
            "{",
            "\"type\": \"sensor_data\",",
            "\"timestamp\": <uint32_t>,",
            "\"imu\": [ax, ay, az, gx, gy, gz],           // float[6] - accelerometer + gyroscope",
            "\"magnetometer\": [mx, my, mz],              // float[3] - magnetometer",
            "\"ultrasonic\": [left, center, right],       // float[3] - ultrasonic sensors",
            "\"power\": [voltage, current],               // float[2] - power measurements",
            "\"safety\": {",
            "\"emergency_stop\": <bool>,                // Emergency stop flag",
            "\"rain_sensor\": <bool>,                   // Rain sensor flag",
            "\"bumper\": <bool>,                        // Bumper sensor flag",
            "\"lift_sensor\": <bool>                    // Lift sensor flag",
            "}",
            "}"
          ]
        },
        "report": {
          "topic": "/status",
          "json_example": [
            "{",
            "\"type\": \"status_report\",",
            "\"timestamp\": <uint32_t>,",
            "\"motors\": {",
            "\"left_speed\": <float>,                   // Left motor speed",
            "\"right_speed\": <float>,                  // Right motor speed",
            "\"blade1_speed\": <float>,                 // Blade 1 motor speed",
            "\"blade2_speed\": <float>,                 // Blade 2 motor speed",
            "\"left_rpm\": <float>,                     // Left motor RPM",
            "\"right_rpm\": <float>,                    // Right motor RPM",
            "\"blade1_rpm\": <float>,                   // Blade 1 motor RPM",
            "\"blade2_rpm\": <float>                    // Blade 2 motor RPM",
            "},",
            "\"encoders\": [left, right, blade1, blade2], // uint32_t[4] - encoder counts",
            "\"system\": {",
            "\"running\": true,                         // System running status",
            "\"relay_state\": <bool>                    // Relay state",
            "}",
            "}"
          ]
        },
        "heartbeat": {
          "topic": "/bridge/status",
          "json_example": [
            "{",
            "\"type\": \"bridge_heartbeat\",",
            "\"timestamp\": <timestamp>,",
            "\"system\": {",
            "\"running\": true,                         // Bridge running status",
            "\"communication_ok\": true,                // Communication with Pico OK",
            "\"relay_state\": false                     // Relay state",
            "}",
            "}"
          ]
        },
        "command": {
          "topic": "/cmd/system",
          "json_example": [
            "{",
            "\"command\": \"<command_string>\",             // \"emergency_stop\", \"reset\", \"calibrate\"",
            "\"value\": <float>                           // Optional command value",
            "}"
          ]
        }
      }
    },
    "gps": {
      "name": "gps",
      "header_file": "/home/vito/smartmower/src/gps/gps_mqtt.h",
      "published_topics": [
        "gps_data",
        "gps_status",
        "gps_cmd"
      ],
      "subscribed_topics": [],
      "message_types": [
        "gps_data",
        "gps_status"
      ],
      "configuration": {
        "base_topic": "smartmower/gps",
        "client_id": "gps_bridge",
        "heartbeat_interval": "5"
      },
      "json_structures": {
        "data": {
          "topic": "/data",
          "json_example": [
            "{",
            "\"type\": \"gps_data\",",
            "\"timestamp\": <uint32_t>,                   // Timestamp in milliseconds",
            "\"position\": {",
            "\"latitude\": <double>,                    // Latitude in degrees",
            "\"longitude\": <double>,                   // Longitude in degrees",
            "\"altitude\": <float>                      // Altitude in meters above sea level",
            "},",
            "\"quality\": {",
            "\"fix_type\": <int>,                       // GPS fix type (0=no fix, 1=GPS, 2=DGPS, 3=RTK)",
            "\"satellites\": <int>,                     // Number of satellites in use",
            "\"hdop\": <float>,                         // Horizontal dilution of precision",
            "\"vdop\": <float>                          // Vertical dilution of precision",
            "},",
            "\"velocity\": {",
            "\"speed\": <float>,                        // Speed over ground in m/s",
            "\"heading\": <float>,                      // Course over ground in degrees",
            "\"climb\": <float>                         // Vertical velocity in m/s",
            "},",
            "\"accuracy\": {",
            "\"horizontal\": <float>,                   // Horizontal accuracy in meters",
            "\"vertical\": <float>                      // Vertical accuracy in meters",
            "}",
            "}"
          ]
        },
        "status": {
          "topic": "/status",
          "json_example": [
            "{",
            "\"type\": \"gps_status\",",
            "\"timestamp\": <uint32_t>,",
            "\"system\": {",
            "\"running\": <bool>,                       // GPS system running status",
            "\"communication_ok\": <bool>,              // Communication with GPS module OK",
            "\"last_fix_time\": <uint32_t>,             // Timestamp of last valid fix",
            "\"module_type\": <string>                  // GPS module type/model",
            "},",
            "\"performance\": {",
            "\"update_rate\": <float>,                  // Current update rate in Hz",
            "\"data_age\": <float>                      // Age of current data in seconds",
            "}",
            "}"
          ]
        },
        "command": {
          "topic": "/cmd",
          "json_example": [
            "{",
            "\"command\": \"<command_string>\",             // \"reset\", \"cold_start\", \"warm_start\", \"set_rate\"",
            "\"parameters\": {                            // Optional command parameters",
            "\"rate\": <int>                            // For set_rate command (Hz)",
            "}",
            "}"
          ]
        }
      }
    },
    "fusion": {
      "name": "fusion",
      "header_file": "/home/vito/smartmower/src/fusion/fusion_mqtt.h",
      "published_topics": [
        "fusion_data",
        "fusion_status",
        "fusion_cmd",
        "fusion_imu_data",
        "fusion_gps_data"
      ],
      "subscribed_topics": [
        "pico_sensors",
        "gps_data"
      ],
      "message_types": [
        "fusion_data",
        "fusion_status"
      ],
      "configuration": {
        "base_topic": "smartmower/fusion",
        "client_id": "fusion_sensor",
        "heartbeat_interval": "5"
      },
      "json_structures": {
        "data": {
          "topic": "/data",
          "json_example": [
            "{",
            "\"type\": \"fusion_data\",",
            "\"timestamp\": <uint32_t>,                   // Timestamp in milliseconds",
            "\"pose\": {",
            "\"position\": {",
            "\"x\": <double>,                         // Position X in meters (local frame)",
            "\"y\": <double>,                         // Position Y in meters (local frame)",
            "\"z\": <double>                          // Position Z in meters (altitude)",
            "},",
            "\"orientation\": {",
            "\"w\": <float>,                          // Quaternion w component",
            "\"x\": <float>,                          // Quaternion x component",
            "\"y\": <float>,                          // Quaternion y component",
            "\"z\": <float>                           // Quaternion z component",
            "}",
            "},",
            "\"velocity\": {",
            "\"linear\": {",
            "\"x\": <float>,                          // Linear velocity X in m/s",
            "\"y\": <float>,                          // Linear velocity Y in m/s",
            "\"z\": <float>                           // Linear velocity Z in m/s",
            "},",
            "\"angular\": {",
            "\"x\": <float>,                          // Angular velocity X in rad/s",
            "\"y\": <float>,                          // Angular velocity Y in rad/s",
            "\"z\": <float>                           // Angular velocity Z in rad/s",
            "}",
            "},",
            "\"covariance\": {",
            "\"position\": [<float>],                   // 3x3 position covariance matrix (row-major)",
            "\"orientation\": [<float>]                 // 3x3 orientation covariance matrix (row-major)",
            "},",
            "\"quality\": {",
            "\"confidence\": <float>,                   // Overall fusion confidence (0.0 to 1.0)",
            "\"convergence\": <bool>                    // Filter has converged",
            "}",
            "}"
          ]
        },
        "status": {
          "topic": "/status",
          "json_example": [
            "{",
            "\"type\": \"fusion_status\",",
            "\"timestamp\": <uint32_t>,",
            "\"system\": {",
            "\"running\": <bool>,                       // Fusion system running status",
            "\"filter_initialized\": <bool>,            // Kalman filter initialized",
            "\"filter_type\": <string>                  // Filter type (EKF, UKF, etc.)",
            "},",
            "\"input_sources\": {",
            "\"imu\": {",
            "\"available\": <bool>,                   // IMU data available",
            "\"last_update\": <uint32_t>,             // Last IMU update timestamp",
            "\"rate\": <float>                        // IMU update rate in Hz",
            "},",
            "\"gps\": {",
            "\"available\": <bool>,                   // GPS data available",
            "\"last_update\": <uint32_t>,             // Last GPS update timestamp",
            "\"quality\": <int>                       // GPS fix quality",
            "},",
            "\"encoders\": {",
            "\"available\": <bool>,                   // Encoder data available",
            "\"last_update\": <uint32_t>              // Last encoder update timestamp",
            "}",
            "},",
            "\"performance\": {",
            "\"processing_time\": <float>,              // Processing time per cycle in ms",
            "\"update_rate\": <float>                   // Output update rate in Hz",
            "}",
            "}"
          ]
        },
        "command": {
          "topic": "/cmd",
          "json_example": [
            "{",
            "\"command\": \"<command_string>\",             // \"reset\", \"calibrate\", \"set_mode\"",
            "\"parameters\": {",
            "\"mode\": <string>,                        // For set_mode: \"gps\", \"dead_reckoning\", \"fusion\"",
            "\"reset_position\": <bool>                 // For reset: reset position estimate",
            "}",
            "}"
          ]
        }
      }
    },
    "slam": {
      "name": "slam",
      "header_file": "/home/vito/smartmower/src/slam/slam_mqtt.h",
      "published_topics": [
        "slam_map",
        "slam_pose",
        "slam_path",
        "slam_status",
        "slam_cmd",
        "slam_fusion_data",
        "slam_gps_data",
        "slam_sensor_data"
      ],
      "subscribed_topics": [
        "fusion_data",
        "gps_data",
        "pico_sensors"
      ],
      "message_types": [
        "slam_map",
        "slam_pose",
        "slam_path",
        "slam_status"
      ],
      "configuration": {
        "base_topic": "smartmower/slam",
        "client_id": "slam_node",
        "heartbeat_interval": "5"
      },
      "json_structures": {
        "map": {
          "topic": "/map",
          "json_example": [
            "{",
            "\"type\": \"slam_map\",",
            "\"timestamp\": <uint32_t>,",
            "\"map\": {",
            "\"width\": <int>,                          // Map width in cells",
            "\"height\": <int>,                         // Map height in cells",
            "\"resolution\": <float>,                   // Meters per cell",
            "\"origin\": {",
            "\"x\": <double>,                         // Map origin X in meters",
            "\"y\": <double>,                         // Map origin Y in meters",
            "\"theta\": <float>                       // Map origin orientation in radians",
            "},",
            "\"data\": \"<base64_encoded_data>\",         // Occupancy grid data (base64 encoded)",
            "\"encoding\": \"uint8\"                      // Data encoding type",
            "},",
            "\"metadata\": {",
            "\"algorithm\": <string>,                   // SLAM algorithm used",
            "\"confidence\": <float>,                   // Map confidence (0.0 to 1.0)",
            "\"loop_closures\": <int>                   // Number of loop closures detected",
            "}",
            "}"
          ]
        },
        "pose": {
          "topic": "/pose",
          "json_example": [
            "{",
            "\"type\": \"slam_pose\",",
            "\"timestamp\": <uint32_t>,",
            "\"pose\": {",
            "\"position\": {",
            "\"x\": <double>,                         // Position X in meters",
            "\"y\": <double>,                         // Position Y in meters",
            "\"z\": <double>                          // Position Z in meters",
            "},",
            "\"orientation\": {",
            "\"w\": <float>,                          // Quaternion w component",
            "\"x\": <float>,                          // Quaternion x component",
            "\"y\": <float>,                          // Quaternion y component",
            "\"z\": <float>                           // Quaternion z component",
            "}",
            "},",
            "\"covariance\": [<float>],                   // 6x6 pose covariance matrix",
            "\"quality\": {",
            "\"confidence\": <float>,                   // Pose confidence (0.0 to 1.0)",
            "\"tracking_quality\": <string>             // \"good\", \"poor\", \"lost\"",
            "}",
            "}"
          ]
        },
        "path": {
          "topic": "/path",
          "json_example": [
            "{",
            "\"type\": \"slam_path\",",
            "\"timestamp\": <uint32_t>,",
            "\"path\": {",
            "\"waypoints\": [",
            "{",
            "\"x\": <double>,                       // Waypoint X in meters",
            "\"y\": <double>,                       // Waypoint Y in meters",
            "\"theta\": <float>                     // Waypoint orientation in radians",
            "}",
            "\"total_length\": <float>,                 // Total path length in meters",
            "\"algorithm\": <string>                    // Path planning algorithm used",
            "},",
            "\"execution\": {",
            "\"current_waypoint\": <int>,               // Current waypoint index",
            "\"progress\": <float>                      // Progress along path (0.0 to 1.0)",
            "}",
            "}"
          ]
        },
        "status": {
          "topic": "/status",
          "json_example": [
            "{",
            "\"type\": \"slam_status\",",
            "\"timestamp\": <uint32_t>,",
            "\"system\": {",
            "\"running\": <bool>,                       // SLAM system running status",
            "\"mode\": <string>,                        // \"mapping\", \"localization\", \"slam\"",
            "\"algorithm\": <string>                    // Current SLAM algorithm",
            "},",
            "\"mapping\": {",
            "\"active\": <bool>,                        // Mapping is active",
            "\"map_size\": <int>,                       // Current map size in cells",
            "\"explored_area\": <float>                 // Explored area in square meters",
            "},",
            "\"localization\": {",
            "\"active\": <bool>,                        // Localization is active",
            "\"tracking_quality\": <string>,            // \"good\", \"poor\", \"lost\"",
            "\"last_loop_closure\": <uint32_t>          // Timestamp of last loop closure",
            "},",
            "\"performance\": {",
            "\"processing_time\": <float>,              // Processing time per cycle in ms",
            "\"memory_usage\": <int>                    // Memory usage in MB",
            "}",
            "}"
          ]
        },
        "command": {
          "topic": "/cmd",
          "json_example": [
            "{",
            "\"command\": \"<command_string>\",             // \"start_mapping\", \"stop_mapping\", \"save_map\", \"load_map\", \"reset\"",
            "\"parameters\": {",
            "\"map_file\": <string>,                    // For save_map/load_map commands",
            "\"algorithm\": <string>,                   // For algorithm changes",
            "\"reset_map\": <bool>                      // For reset command",
            "}",
            "}"
          ]
        }
      }
    },
    "vision": {
      "name": "vision",
      "header_file": "/home/vito/smartmower/src/vision/vision_mqtt.h",
      "published_topics": [
        "vision_detection",
        "vision_grass",
        "vision_obstacles",
        "vision_perimeter",
        "vision_status",
        "vision_cmd"
      ],
      "subscribed_topics": [],
      "message_types": [
        "vision_detection",
        "vision_grass",
        "vision_obstacles",
        "vision_perimeter",
        "vision_status"
      ],
      "configuration": {
        "base_topic": "smartmower/vision",
        "client_id": "vision_system",
        "heartbeat_interval": "2"
      },
      "json_structures": {
        "detection": {
          "topic": "/perimeter",
          "json_example": [
            "{",
            "\"type\": \"perimeter_detection\",",
            "\"timestamp\": <uint32_t>,",
            "\"camera_id\": <string>,",
            "\"perimeter\": {",
            "\"detected\": <bool>,                      // Perimeter wire detected",
            "\"distance\": <float>,                     // Distance to perimeter in meters",
            "\"angle\": <float>,                        // Angle to perimeter in degrees",
            "\"signal_strength\": <float>               // Signal strength (0.0 to 1.0)",
            "},",
            "\"boundary\": {",
            "\"line_segments\": [",
            "{",
            "\"start\": [<int>, <int>],             // Line start point in image",
            "\"end\": [<int>, <int>],               // Line end point in image",
            "\"confidence\": <float>                // Line detection confidence",
            "}",
            "\"crossing_detected\": <bool>,             // Boundary crossing detected",
            "\"safe_zone\": <bool>                      // Robot is in safe zone",
            "}",
            "}"
          ]
        },
        "status": {
          "topic": "/status",
          "json_example": [
            "{",
            "\"type\": \"vision_status\",",
            "\"timestamp\": <uint32_t>,",
            "\"system\": {",
            "\"running\": <bool>,                       // Vision system running",
            "\"cameras_active\": <int>,                 // Number of active cameras",
            "\"models_loaded\": <bool>,                 // AI models loaded successfully",
            "\"gpu_available\": <bool>                  // GPU acceleration available",
            "},",
            "\"cameras\": [",
            "{",
            "\"id\": <string>,                        // Camera identifier",
            "\"status\": <string>,                    // \"active\", \"inactive\", \"error\"",
            "\"resolution\": <string>,                // Current resolution",
            "\"fps\": <float>,                        // Current FPS",
            "\"last_frame\": <uint32_t>               // Last frame timestamp",
            "}",
            "\"performance\": {",
            "\"detection_fps\": <float>,                // Detection processing FPS",
            "\"total_detections\": <uint32_t>,          // Total detections since start",
            "\"average_processing_time\": <float>,      // Average processing time in ms",
            "\"memory_usage\": <int>                    // Memory usage in MB",
            "},",
            "\"models\": {",
            "\"grass_model\": <string>,                 // Grass detection model version",
            "\"obstacle_model\": <string>,              // Obstacle detection model version",
            "\"perimeter_model\": <string>              // Perimeter detection model version",
            "}",
            "}"
          ]
        },
        "command": {
          "topic": "/cmd",
          "json_example": [
            "{",
            "\"command\": \"<command_string>\",             // \"start\", \"stop\", \"calibrate\", \"switch_camera\", \"set_mode\"",
            "\"parameters\": {",
            "\"camera_id\": <string>,                   // For camera-specific commands",
            "\"mode\": <string>,                        // \"detection\", \"mapping\", \"navigation\"",
            "\"resolution\": <string>,                  // For resolution changes",
            "\"fps\": <int>                             // For FPS changes",
            "}",
            "}"
          ]
        }
      }
    },
    "state_machine": {
      "name": "state_machine",
      "header_file": "/home/vito/smartmower/src/state_machine/state_machine_mqtt.h",
      "published_topics": [
        "state_machine_current",
        "state_machine_transitions",
        "state_machine_status",
        "state_machine_commands",
        "state_machine_cmd",
        "state_machine_pico_sensors",
        "state_machine_pico_status",
        "state_machine_gps_data",
        "state_machine_fusion_data",
        "state_machine_vision_detection",
        "state_machine_vision_obstacles",
        "state_machine_slam_pose"
      ],
      "subscribed_topics": [
        "pico_sensors",
        "pico_status",
        "gps_data",
        "fusion_data",
        "vision_detection",
        "vision_obstacles",
        "slam_pose"
      ],
      "message_types": [
        "state_machine_current",
        "state_machine_transition",
        "state_machine_status",
        "state_machine_command"
      ],
      "configuration": {
        "base_topic": "smartmower/state",
        "client_id": "state_machine",
        "heartbeat_interval": "2"
      },
      "json_structures": {
        "state": {
          "topic": "/current",
          "json_example": [
            "{",
            "\"type\": \"state_current\",",
            "\"timestamp\": <uint32_t>,",
            "\"state\": {",
            "\"name\": <string>,                        // Current state name",
            "\"duration\": <uint32_t>,                  // Time in current state (seconds)",
            "\"sub_state\": <string>,                   // Sub-state if applicable",
            "\"progress\": <float>                      // Progress in current task (0.0 to 1.0)",
            "},",
            "\"context\": {",
            "\"battery_level\": <float>,                // Battery level (0.0 to 100.0)",
            "\"mowing_area\": <string>,                 // Current mowing area",
            "\"weather_condition\": <string>,           // Weather condition",
            "\"safety_status\": <string>                // \"safe\", \"caution\", \"danger\"",
            "},",
            "\"next_actions\": [<string>]                 // Possible next actions",
            "}"
          ]
        },
        "transition": {
          "topic": "/transitions",
          "json_example": [
            "{",
            "\"type\": \"state_transition\",",
            "\"timestamp\": <uint32_t>,",
            "\"transition\": {",
            "\"from_state\": <string>,                  // Previous state",
            "\"to_state\": <string>,                    // New state",
            "\"trigger\": <string>,                     // What triggered the transition",
            "\"reason\": <string>                       // Human-readable reason",
            "},",
            "\"conditions\": {",
            "\"battery_level\": <float>,                // Battery level at transition",
            "\"safety_checks\": <bool>,                 // Safety checks passed",
            "\"weather_ok\": <bool>                     // Weather conditions OK",
            "}",
            "}"
          ]
        },
        "status": {
          "topic": "/status",
          "json_example": [
            "{",
            "\"type\": \"state_status\",",
            "\"timestamp\": <uint32_t>,",
            "\"system\": {",
            "\"running\": <bool>,                       // State machine running",
            "\"current_state\": <string>,               // Current state",
            "\"uptime\": <uint32_t>,                    // System uptime in seconds",
            "\"total_transitions\": <uint32_t>          // Total state transitions",
            "},",
            "\"statistics\": {",
            "\"mowing_time_today\": <uint32_t>,         // Mowing time today in seconds",
            "\"total_mowing_time\": <uint32_t>,         // Total mowing time in seconds",
            "\"areas_completed\": <int>,                // Areas completed today",
            "\"emergency_stops\": <int>                 // Emergency stops today",
            "},",
            "\"health\": {",
            "\"all_systems_ok\": <bool>,                // All systems operational",
            "\"warnings\": [<string>],                  // Active warnings",
            "\"errors\": [<string>]                     // Active errors",
            "}",
            "}"
          ]
        },
        "command": {
          "topic": "/commands",
          "json_example": [
            "{",
            "\"type\": \"state_command\",",
            "\"timestamp\": <uint32_t>,",
            "\"target_system\": <string>,                 // \"pico\", \"gps\", \"fusion\", \"vision\", \"slam\"",
            "\"command\": {",
            "\"action\": <string>,                      // Command action",
            "\"parameters\": {}                         // Command parameters (varies by system)",
            "},",
            "\"priority\": <string>,                      // \"low\", \"normal\", \"high\", \"emergency\"",
            "\"timeout\": <uint32_t>                      // Command timeout in seconds",
            "}"
          ]
        },
        "control": {
          "topic": "/cmd",
          "json_example": [
            "{",
            "\"command\": \"<command_string>\",             // \"start\", \"stop\", \"pause\", \"resume\", \"emergency_stop\", \"go_home\", \"set_mode\"",
            "\"parameters\": {",
            "\"mode\": <string>,                        // \"auto\", \"manual\", \"test\"",
            "\"area\": <string>,                        // Target mowing area",
            "\"schedule\": <bool>                       // Follow schedule",
            "},",
            "\"override\": {",
            "\"safety\": <bool>,                        // Override safety checks (dangerous!)",
            "\"weather\": <bool>,                       // Override weather checks",
            "\"battery\": <bool>                        // Override battery checks",
            "}",
            "}"
          ]
        }
      }
    }
  },
  "topics": {
    "published": {
      "pico_sensors": {
        "path": "/sensors",
        "description": "Raw sensor data from Pico",
        "executable": "pico",
        "type": "published"
      },
      "pico_status": {
        "path": "/status",
        "description": "Motor/system status from Pico",
        "executable": "pico",
        "type": "published"
      },
      "pico_bridge_status": {
        "path": "/bridge/status",
        "description": "Bridge heartbeat",
        "executable": "pico",
        "type": "published"
      },
      "pico_cmd_motors": {
        "path": "/cmd/motors",
        "description": "Motor control commands",
        "executable": "pico",
        "type": "published"
      },
      "pico_cmd_system": {
        "path": "/cmd/system",
        "description": "System control commands",
        "executable": "pico",
        "type": "published"
      },
      "gps_data": {
        "path": "/data",
        "description": "GPS position and navigation data",
        "executable": "gps",
        "type": "published"
      },
      "gps_status": {
        "path": "/status",
        "description": "GPS system status",
        "executable": "gps",
        "type": "published"
      },
      "gps_cmd": {
        "path": "/cmd",
        "description": "GPS control commands",
        "executable": "gps",
        "type": "published"
      },
      "fusion_data": {
        "path": "/data",
        "description": "Fused sensor output",
        "executable": "fusion",
        "type": "published"
      },
      "fusion_status": {
        "path": "/status",
        "description": "Fusion system status",
        "executable": "fusion",
        "type": "published"
      },
      "fusion_cmd": {
        "path": "/cmd",
        "description": "Fusion control commands",
        "executable": "fusion",
        "type": "published"
      },
      "fusion_imu_data": {
        "path": "smartmower/pico/sensors",
        "description": "IMU data from Pico",
        "executable": "fusion",
        "type": "published"
      },
      "fusion_gps_data": {
        "path": "smartmower/gps/data",
        "description": "GPS data",
        "executable": "fusion",
        "type": "published"
      },
      "slam_map": {
        "path": "/map",
        "description": "Generated map data",
        "executable": "slam",
        "type": "published"
      },
      "slam_pose": {
        "path": "/pose",
        "description": "Robot pose estimate",
        "executable": "slam",
        "type": "published"
      },
      "slam_path": {
        "path": "/path",
        "description": "Planned path",
        "executable": "slam",
        "type": "published"
      },
      "slam_status": {
        "path": "/status",
        "description": "SLAM system status",
        "executable": "slam",
        "type": "published"
      },
      "slam_cmd": {
        "path": "/cmd",
        "description": "SLAM control commands",
        "executable": "slam",
        "type": "published"
      },
      "slam_fusion_data": {
        "path": "smartmower/fusion/data",
        "description": "Pose from fusion",
        "executable": "slam",
        "type": "published"
      },
      "slam_gps_data": {
        "path": "smartmower/gps/data",
        "description": "GPS data",
        "executable": "slam",
        "type": "published"
      },
      "slam_sensor_data": {
        "path": "smartmower/pico/sensors",
        "description": "Sensor data from Pico",
        "executable": "slam",
        "type": "published"
      },
      "vision_detection": {
        "path": "/detection",
        "description": "Object detection results",
        "executable": "vision",
        "type": "published"
      },
      "vision_grass": {
        "path": "/grass",
        "description": "Grass detection results",
        "executable": "vision",
        "type": "published"
      },
      "vision_obstacles": {
        "path": "/obstacles",
        "description": "Obstacle detection results",
        "executable": "vision",
        "type": "published"
      },
      "vision_perimeter": {
        "path": "/perimeter",
        "description": "Perimeter detection results",
        "executable": "vision",
        "type": "published"
      },
      "vision_status": {
        "path": "/status",
        "description": "Vision system status",
        "executable": "vision",
        "type": "published"
      },
      "vision_cmd": {
        "path": "/cmd",
        "description": "Vision control commands",
        "executable": "vision",
        "type": "published"
      },
      "state_machine_current": {
        "path": "/current",
        "description": "Current state information",
        "executable": "state_machine",
        "type": "published"
      },
      "state_machine_transitions": {
        "path": "/transitions",
        "description": "State transition events",
        "executable": "state_machine",
        "type": "published"
      },
      "state_machine_status": {
        "path": "/status",
        "description": "State machine status",
        "executable": "state_machine",
        "type": "published"
      },
      "state_machine_commands": {
        "path": "/commands",
        "description": "Commands to other systems",
        "executable": "state_machine",
        "type": "published"
      },
      "state_machine_cmd": {
        "path": "/cmd",
        "description": "State machine control commands",
        "executable": "state_machine",
        "type": "published"
      },
      "state_machine_pico_sensors": {
        "path": "smartmower/pico/sensors",
        "description": "Sensor data from Pico",
        "executable": "state_machine",
        "type": "published"
      },
      "state_machine_pico_status": {
        "path": "smartmower/pico/status",
        "description": "Pico status",
        "executable": "state_machine",
        "type": "published"
      },
      "state_machine_gps_data": {
        "path": "smartmower/gps/data",
        "description": "GPS data",
        "executable": "state_machine",
        "type": "published"
      },
      "state_machine_fusion_data": {
        "path": "smartmower/fusion/data",
        "description": "Fusion data",
        "executable": "state_machine",
        "type": "published"
      },
      "state_machine_vision_detection": {
        "path": "smartmower/vision/detection",
        "description": "Vision detection",
        "executable": "state_machine",
        "type": "published"
      },
      "state_machine_vision_obstacles": {
        "path": "smartmower/vision/obstacles",
        "description": "Obstacle detection",
        "executable": "state_machine",
        "type": "published"
      },
      "state_machine_slam_pose": {
        "path": "smartmower/slam/pose",
        "description": "SLAM pose",
        "executable": "state_machine",
        "type": "published"
      }
    },
    "subscribed": {}
  },
  "message_types": {
    "json": {
      "pico_sensor_data": "sensor_data",
      "pico_status_report": "status_report",
      "pico_bridge_heartbeat": "bridge_heartbeat",
      "gps_data": "gps_data",
      "gps_status": "gps_status",
      "fusion_data": "fusion_data",
      "fusion_status": "fusion_status",
      "slam_map": "slam_map",
      "slam_pose": "slam_pose",
      "slam_path": "slam_path",
      "slam_status": "slam_status",
      "vision_detection": "vision_detection",
      "vision_grass": "grass_detection",
      "vision_obstacles": "obstacle_detection",
      "vision_perimeter": "perimeter_detection",
      "vision_status": "vision_status",
      "state_machine_current": "state_current",
      "state_machine_transition": "state_transition",
      "state_machine_status": "state_status",
      "state_machine_command": "state_command"
    }
  }
}